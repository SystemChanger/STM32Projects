
LEDSOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000d18  08000d18  00010d18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000d4c  08000d4c  00010d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000d50  08000d50  00010d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  08000d58  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000024  08000d58  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000170b  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00002c93  00000000  00000000  00021737  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000dae  00000000  00000000  000243ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000002d8  00000000  00000000  00025178  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003c8  00000000  00000000  00025450  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000ddd  00000000  00000000  00025818  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000df3  00000000  00000000  000265f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000273e8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000608  00000000  00000000  00027468  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000d00 	.word	0x08000d00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000d00 	.word	0x08000d00

08000108 <__aeabi_uidiv>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__aeabi_uidiv+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__aeabi_uidiv+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__aeabi_uidiv+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__aeabi_uidiv+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__aeabi_uidiv+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__aeabi_uidiv+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__aeabi_uidiv+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__aeabi_uidiv+0x6c>
 8000140:	e000      	b.n	8000144 <__aeabi_uidiv+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__aeabi_uidiv+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__aeabi_uidiv+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__aeabi_uidiv+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__aeabi_uidiv+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__aeabi_uidiv+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__aeabi_uidiv+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__aeabi_uidiv+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__aeabi_uidiv+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__aeabi_uidiv+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__aeabi_uidiv+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__aeabi_uidiv+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__aeabi_uidiv+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__aeabi_uidiv+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__aeabi_uidiv+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__aeabi_uidiv+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__aeabi_uidiv+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__aeabi_uidiv+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__aeabi_uidiv+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__aeabi_uidiv+0x100>
 8000218:	e776      	b.n	8000108 <__aeabi_uidiv>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000222:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000224:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000226:	e003      	b.n	8000230 <LoopCopyDataInit>

08000228 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800022a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800022c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800022e:	3104      	adds	r1, #4

08000230 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000230:	480b      	ldr	r0, [pc, #44]	; (8000260 <LoopForever+0xa>)
  ldr r3, =_edata
 8000232:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <LoopForever+0xe>)
  adds r2, r0, r1
 8000234:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000236:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000238:	d3f6      	bcc.n	8000228 <CopyDataInit>
  ldr r2, =_sbss
 800023a:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <LoopForever+0x12>)
  b LoopFillZerobss
 800023c:	e002      	b.n	8000244 <LoopFillZerobss>

0800023e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000240:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000242:	3204      	adds	r2, #4

08000244 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000244:	4b09      	ldr	r3, [pc, #36]	; (800026c <LoopForever+0x16>)
  cmp r2, r3
 8000246:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000248:	d3f9      	bcc.n	800023e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800024a:	f000 f813 	bl	8000274 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800024e:	f000 fd27 	bl	8000ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000252:	f000 fcbf 	bl	8000bd4 <main>

08000256 <LoopForever>:

LoopForever:
    b LoopForever
 8000256:	e7fe      	b.n	8000256 <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000258:	20002000 	.word	0x20002000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 800025c:	08000d54 	.word	0x08000d54
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000260:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000264:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000268:	20000004 	.word	0x20000004
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 800026c:	20000024 	.word	0x20000024

08000270 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC1_COMP_IRQHandler>
	...

08000274 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000274:	2101      	movs	r1, #1
 8000276:	4b11      	ldr	r3, [pc, #68]	; (80002bc <SystemInit+0x48>)
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	430a      	orrs	r2, r1
 800027c:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 800027e:	6858      	ldr	r0, [r3, #4]
 8000280:	4a0f      	ldr	r2, [pc, #60]	; (80002c0 <SystemInit+0x4c>)
 8000282:	4002      	ands	r2, r0
 8000284:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000286:	6818      	ldr	r0, [r3, #0]
 8000288:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <SystemInit+0x50>)
 800028a:	4002      	ands	r2, r0
 800028c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800028e:	6818      	ldr	r0, [r3, #0]
 8000290:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <SystemInit+0x54>)
 8000292:	4002      	ands	r2, r0
 8000294:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000296:	6858      	ldr	r0, [r3, #4]
 8000298:	4a0c      	ldr	r2, [pc, #48]	; (80002cc <SystemInit+0x58>)
 800029a:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800029c:	200f      	movs	r0, #15

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800029e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80002a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80002a2:	4382      	bics	r2, r0
 80002a4:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 80002a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80002a8:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <SystemInit+0x5c>)
 80002aa:	4002      	ands	r2, r0
 80002ac:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80002ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80002b0:	438a      	bics	r2, r1
 80002b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]

}
 80002b8:	4770      	bx	lr
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	40021000 	.word	0x40021000
 80002c0:	f8ffb80c 	.word	0xf8ffb80c
 80002c4:	fef6ffff 	.word	0xfef6ffff
 80002c8:	fffbffff 	.word	0xfffbffff
 80002cc:	ffc0ffff 	.word	0xffc0ffff
 80002d0:	fffffeac 	.word	0xfffffeac

080002d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002d4:	b510      	push	{r4, lr}
 80002d6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80002d8:	f000 fc00 	bl	8000adc <HAL_RCC_GetHCLKFreq>
 80002dc:	21fa      	movs	r1, #250	; 0xfa
 80002de:	0089      	lsls	r1, r1, #2
 80002e0:	f7ff ff12 	bl	8000108 <__aeabi_uidiv>
 80002e4:	f000 f862 	bl	80003ac <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80002e8:	2001      	movs	r0, #1
 80002ea:	2200      	movs	r2, #0
 80002ec:	0021      	movs	r1, r4
 80002ee:	4240      	negs	r0, r0
 80002f0:	f000 f82c 	bl	800034c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80002f4:	2000      	movs	r0, #0
 80002f6:	bd10      	pop	{r4, pc}

080002f8 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002f8:	2110      	movs	r1, #16
 80002fa:	4a06      	ldr	r2, [pc, #24]	; (8000314 <HAL_Init+0x1c>)
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002fc:	b510      	push	{r4, lr}
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002fe:	6813      	ldr	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000300:	2000      	movs	r0, #0
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000302:	430b      	orrs	r3, r1
 8000304:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000306:	f7ff ffe5 	bl	80002d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800030a:	f000 fca3 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800030e:	2000      	movs	r0, #0
 8000310:	bd10      	pop	{r4, pc}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	40022000 	.word	0x40022000

08000318 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000318:	4a02      	ldr	r2, [pc, #8]	; (8000324 <HAL_IncTick+0xc>)
 800031a:	6813      	ldr	r3, [r2, #0]
 800031c:	3301      	adds	r3, #1
 800031e:	6013      	str	r3, [r2, #0]
}
 8000320:	4770      	bx	lr
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	20000020 	.word	0x20000020

08000328 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000328:	4b01      	ldr	r3, [pc, #4]	; (8000330 <HAL_GetTick+0x8>)
 800032a:	6818      	ldr	r0, [r3, #0]
}
 800032c:	4770      	bx	lr
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	20000020 	.word	0x20000020

08000334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000334:	b513      	push	{r0, r1, r4, lr}
 8000336:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000338:	f7ff fff6 	bl	8000328 <HAL_GetTick>
 800033c:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800033e:	f7ff fff3 	bl	8000328 <HAL_GetTick>
 8000342:	9b01      	ldr	r3, [sp, #4]
 8000344:	1b00      	subs	r0, r0, r4
 8000346:	4298      	cmp	r0, r3
 8000348:	d3f9      	bcc.n	800033e <HAL_Delay+0xa>
  {
  }
}
 800034a:	bd13      	pop	{r0, r1, r4, pc}

0800034c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800034c:	b570      	push	{r4, r5, r6, lr}
 800034e:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000350:	2800      	cmp	r0, #0
 8000352:	da14      	bge.n	800037e <HAL_NVIC_SetPriority+0x32>
 8000354:	230f      	movs	r3, #15
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000356:	b2c0      	uxtb	r0, r0
 8000358:	4003      	ands	r3, r0
 800035a:	3b08      	subs	r3, #8
 800035c:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <HAL_NVIC_SetPriority+0x58>)
 800035e:	089b      	lsrs	r3, r3, #2
 8000360:	2403      	movs	r4, #3
 8000362:	009b      	lsls	r3, r3, #2
 8000364:	189b      	adds	r3, r3, r2
 8000366:	22ff      	movs	r2, #255	; 0xff
 8000368:	4020      	ands	r0, r4
 800036a:	40a0      	lsls	r0, r4
 800036c:	0014      	movs	r4, r2
 800036e:	400a      	ands	r2, r1
 8000370:	4084      	lsls	r4, r0
 8000372:	4082      	lsls	r2, r0
 8000374:	69dd      	ldr	r5, [r3, #28]
 8000376:	43a5      	bics	r5, r4
 8000378:	432a      	orrs	r2, r5
 800037a:	61da      	str	r2, [r3, #28]
 800037c:	e011      	b.n	80003a2 <HAL_NVIC_SetPriority+0x56>
 800037e:	0882      	lsrs	r2, r0, #2
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <HAL_NVIC_SetPriority+0x5c>)
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000382:	2503      	movs	r5, #3
 8000384:	0092      	lsls	r2, r2, #2
 8000386:	18d2      	adds	r2, r2, r3
 8000388:	23ff      	movs	r3, #255	; 0xff
 800038a:	4028      	ands	r0, r5
 800038c:	40a8      	lsls	r0, r5
 800038e:	001d      	movs	r5, r3
 8000390:	24c0      	movs	r4, #192	; 0xc0
 8000392:	4085      	lsls	r5, r0
 8000394:	400b      	ands	r3, r1
 8000396:	4083      	lsls	r3, r0
 8000398:	00a4      	lsls	r4, r4, #2
 800039a:	5916      	ldr	r6, [r2, r4]
 800039c:	43ae      	bics	r6, r5
 800039e:	4333      	orrs	r3, r6
 80003a0:	5113      	str	r3, [r2, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	e000ed00 	.word	0xe000ed00
 80003a8:	e000e100 	.word	0xe000e100

080003ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003ac:	4a09      	ldr	r2, [pc, #36]	; (80003d4 <HAL_SYSTICK_Config+0x28>)
 80003ae:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80003b0:	2001      	movs	r0, #1
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d80d      	bhi.n	80003d2 <HAL_SYSTICK_Config+0x26>
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003b6:	20c0      	movs	r0, #192	; 0xc0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b8:	4a07      	ldr	r2, [pc, #28]	; (80003d8 <HAL_SYSTICK_Config+0x2c>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003ba:	4908      	ldr	r1, [pc, #32]	; (80003dc <HAL_SYSTICK_Config+0x30>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003bc:	6053      	str	r3, [r2, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003be:	6a0b      	ldr	r3, [r1, #32]
 80003c0:	0600      	lsls	r0, r0, #24
 80003c2:	021b      	lsls	r3, r3, #8
 80003c4:	0a1b      	lsrs	r3, r3, #8
 80003c6:	4303      	orrs	r3, r0
 80003c8:	620b      	str	r3, [r1, #32]
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ca:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003cc:	2307      	movs	r3, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ce:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003d0:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003d2:	4770      	bx	lr
 80003d4:	00ffffff 	.word	0x00ffffff
 80003d8:	e000e010 	.word	0xe000e010
 80003dc:	e000ed00 	.word	0xe000ed00

080003e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80003e2:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80003e4:	2804      	cmp	r0, #4
 80003e6:	d102      	bne.n	80003ee <HAL_SYSTICK_CLKSourceConfig+0xe>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80003e8:	4310      	orrs	r0, r2
 80003ea:	6018      	str	r0, [r3, #0]
 80003ec:	e002      	b.n	80003f4 <HAL_SYSTICK_CLKSourceConfig+0x14>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80003ee:	2104      	movs	r1, #4
 80003f0:	438a      	bics	r2, r1
 80003f2:	601a      	str	r2, [r3, #0]
  }
}
 80003f4:	4770      	bx	lr
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	e000e010 	.word	0xe000e010

080003fc <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80003fc:	4770      	bx	lr

080003fe <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80003fe:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000400:	f7ff fffc 	bl	80003fc <HAL_SYSTICK_Callback>
}
 8000404:	bd10      	pop	{r4, pc}
	...

08000408 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800040a:	680b      	ldr	r3, [r1, #0]
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800040c:	b087      	sub	sp, #28
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800040e:	9302      	str	r3, [sp, #8]
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 8000410:	2300      	movs	r3, #0
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000412:	9101      	str	r1, [sp, #4]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000414:	9a02      	ldr	r2, [sp, #8]
 8000416:	40da      	lsrs	r2, r3
 8000418:	d100      	bne.n	800041c <HAL_GPIO_Init+0x14>
 800041a:	e095      	b.n	8000548 <HAL_GPIO_Init+0x140>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800041c:	2201      	movs	r2, #1
 800041e:	409a      	lsls	r2, r3
 8000420:	9203      	str	r2, [sp, #12]
 8000422:	9903      	ldr	r1, [sp, #12]
 8000424:	9a02      	ldr	r2, [sp, #8]
 8000426:	400a      	ands	r2, r1
 8000428:	9200      	str	r2, [sp, #0]
    
    if(iocurrent)
 800042a:	d100      	bne.n	800042e <HAL_GPIO_Init+0x26>
 800042c:	e08a      	b.n	8000544 <HAL_GPIO_Init+0x13c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800042e:	9a01      	ldr	r2, [sp, #4]
 8000430:	2110      	movs	r1, #16
 8000432:	6852      	ldr	r2, [r2, #4]
 8000434:	0016      	movs	r6, r2
 8000436:	438e      	bics	r6, r1
 8000438:	2e02      	cmp	r6, #2
 800043a:	d10e      	bne.n	800045a <HAL_GPIO_Init+0x52>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 800043c:	2507      	movs	r5, #7
 800043e:	401d      	ands	r5, r3
 8000440:	00ad      	lsls	r5, r5, #2
 8000442:	3901      	subs	r1, #1
 8000444:	40a9      	lsls	r1, r5
 8000446:	08dc      	lsrs	r4, r3, #3
 8000448:	00a4      	lsls	r4, r4, #2
 800044a:	1904      	adds	r4, r0, r4
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 800044c:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 800044e:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8000450:	9901      	ldr	r1, [sp, #4]
 8000452:	6909      	ldr	r1, [r1, #16]
 8000454:	40a9      	lsls	r1, r5
 8000456:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3] = temp;
 8000458:	6227      	str	r7, [r4, #32]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800045a:	2403      	movs	r4, #3
 800045c:	005f      	lsls	r7, r3, #1
 800045e:	40bc      	lsls	r4, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000460:	2103      	movs	r1, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000462:	43e4      	mvns	r4, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000464:	4011      	ands	r1, r2
 8000466:	40b9      	lsls	r1, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000468:	6805      	ldr	r5, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800046a:	3e01      	subs	r6, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800046c:	4025      	ands	r5, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800046e:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000470:	6005      	str	r5, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000472:	2e01      	cmp	r6, #1
 8000474:	d80f      	bhi.n	8000496 <HAL_GPIO_Init+0x8e>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000476:	9901      	ldr	r1, [sp, #4]
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000478:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800047a:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800047c:	4025      	ands	r5, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800047e:	40be      	lsls	r6, r7
 8000480:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000482:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000484:	6845      	ldr	r5, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000486:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000488:	0916      	lsrs	r6, r2, #4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800048a:	438d      	bics	r5, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800048c:	2101      	movs	r1, #1
 800048e:	400e      	ands	r6, r1
 8000490:	409e      	lsls	r6, r3
 8000492:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000494:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000496:	68c5      	ldr	r5, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000498:	9901      	ldr	r1, [sp, #4]
        GPIOx->OTYPER = temp;
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800049a:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800049c:	688d      	ldr	r5, [r1, #8]
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800049e:	2180      	movs	r1, #128	; 0x80
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80004a0:	40bd      	lsls	r5, r7
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80004a2:	0549      	lsls	r1, r1, #21
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80004a4:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80004a6:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80004a8:	420a      	tst	r2, r1
 80004aa:	d04b      	beq.n	8000544 <HAL_GPIO_Init+0x13c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ac:	2101      	movs	r1, #1
 80004ae:	4c27      	ldr	r4, [pc, #156]	; (800054c <HAL_GPIO_Init+0x144>)
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80004b0:	2703      	movs	r7, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b2:	69a5      	ldr	r5, [r4, #24]
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80004b4:	401f      	ands	r7, r3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b6:	430d      	orrs	r5, r1
 80004b8:	61a5      	str	r5, [r4, #24]
 80004ba:	69a4      	ldr	r4, [r4, #24]
 80004bc:	089d      	lsrs	r5, r3, #2
 80004be:	400c      	ands	r4, r1
 80004c0:	9405      	str	r4, [sp, #20]
 80004c2:	9c05      	ldr	r4, [sp, #20]
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80004c4:	240f      	movs	r4, #15
 80004c6:	4922      	ldr	r1, [pc, #136]	; (8000550 <HAL_GPIO_Init+0x148>)
 80004c8:	00ad      	lsls	r5, r5, #2
 80004ca:	00bf      	lsls	r7, r7, #2
 80004cc:	186d      	adds	r5, r5, r1
 80004ce:	40bc      	lsls	r4, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80004d0:	2190      	movs	r1, #144	; 0x90
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
 80004d2:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80004d4:	05c9      	lsls	r1, r1, #23
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80004d6:	43a6      	bics	r6, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80004d8:	2400      	movs	r4, #0
 80004da:	4288      	cmp	r0, r1
 80004dc:	d00c      	beq.n	80004f8 <HAL_GPIO_Init+0xf0>
 80004de:	491d      	ldr	r1, [pc, #116]	; (8000554 <HAL_GPIO_Init+0x14c>)
 80004e0:	3401      	adds	r4, #1
 80004e2:	4288      	cmp	r0, r1
 80004e4:	d008      	beq.n	80004f8 <HAL_GPIO_Init+0xf0>
 80004e6:	491c      	ldr	r1, [pc, #112]	; (8000558 <HAL_GPIO_Init+0x150>)
 80004e8:	3401      	adds	r4, #1
 80004ea:	4288      	cmp	r0, r1
 80004ec:	d004      	beq.n	80004f8 <HAL_GPIO_Init+0xf0>
 80004ee:	491b      	ldr	r1, [pc, #108]	; (800055c <HAL_GPIO_Init+0x154>)
 80004f0:	3403      	adds	r4, #3
 80004f2:	4288      	cmp	r0, r1
 80004f4:	d100      	bne.n	80004f8 <HAL_GPIO_Init+0xf0>
 80004f6:	3c02      	subs	r4, #2
 80004f8:	40bc      	lsls	r4, r7
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80004fa:	9900      	ldr	r1, [sp, #0]
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80004fc:	4334      	orrs	r4, r6
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(temp, iocurrent); 
 80004fe:	000e      	movs	r6, r1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
 8000500:	60ac      	str	r4, [r5, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000502:	4c17      	ldr	r4, [pc, #92]	; (8000560 <HAL_GPIO_Init+0x158>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000504:	43cd      	mvns	r5, r1
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000506:	6827      	ldr	r7, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(temp, iocurrent); 
 8000508:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800050a:	03d1      	lsls	r1, r2, #15
 800050c:	d401      	bmi.n	8000512 <HAL_GPIO_Init+0x10a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800050e:	003e      	movs	r6, r7
 8000510:	402e      	ands	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8000512:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000514:	6867      	ldr	r7, [r4, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        { 
          SET_BIT(temp, iocurrent); 
 8000516:	9e00      	ldr	r6, [sp, #0]
 8000518:	433e      	orrs	r6, r7
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800051a:	0391      	lsls	r1, r2, #14
 800051c:	d401      	bmi.n	8000522 <HAL_GPIO_Init+0x11a>
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800051e:	003e      	movs	r6, r7
 8000520:	402e      	ands	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8000522:	6066      	str	r6, [r4, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000524:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(temp, iocurrent); 
 8000526:	9e00      	ldr	r6, [sp, #0]
 8000528:	433e      	orrs	r6, r7
        EXTI->EMR = temp;
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800052a:	02d1      	lsls	r1, r2, #11
 800052c:	d401      	bmi.n	8000532 <HAL_GPIO_Init+0x12a>
        }
        EXTI->EMR = temp;
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800052e:	003e      	movs	r6, r7
 8000530:	402e      	ands	r6, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8000532:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000534:	68e6      	ldr	r6, [r4, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(temp, iocurrent); 
 8000536:	9f00      	ldr	r7, [sp, #0]
 8000538:	4337      	orrs	r7, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800053a:	0292      	lsls	r2, r2, #10
 800053c:	d401      	bmi.n	8000542 <HAL_GPIO_Init+0x13a>
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800053e:	402e      	ands	r6, r5
 8000540:	0037      	movs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8000542:	60e7      	str	r7, [r4, #12]
      }
    }
    
    position++;
 8000544:	3301      	adds	r3, #1
 8000546:	e765      	b.n	8000414 <HAL_GPIO_Init+0xc>
  } 
}
 8000548:	b007      	add	sp, #28
 800054a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800054c:	40021000 	.word	0x40021000
 8000550:	40010000 	.word	0x40010000
 8000554:	48000400 	.word	0x48000400
 8000558:	48000800 	.word	0x48000800
 800055c:	48000c00 	.word	0x48000c00
 8000560:	40010400 	.word	0x40010400

08000564 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000564:	2a00      	cmp	r2, #0
 8000566:	d001      	beq.n	800056c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000568:	6181      	str	r1, [r0, #24]
 800056a:	e000      	b.n	800056e <HAL_GPIO_WritePin+0xa>
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800056c:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800056e:	4770      	bx	lr

08000570 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000572:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000574:	b085      	sub	sp, #20
 8000576:	0005      	movs	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000578:	07db      	lsls	r3, r3, #31
 800057a:	d403      	bmi.n	8000584 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800057c:	682b      	ldr	r3, [r5, #0]
 800057e:	079b      	lsls	r3, r3, #30
 8000580:	d454      	bmi.n	800062c <HAL_RCC_OscConfig+0xbc>
 8000582:	e09a      	b.n	80006ba <HAL_RCC_OscConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000584:	230c      	movs	r3, #12
 8000586:	4cb7      	ldr	r4, [pc, #732]	; (8000864 <HAL_RCC_OscConfig+0x2f4>)
 8000588:	6862      	ldr	r2, [r4, #4]
 800058a:	401a      	ands	r2, r3
 800058c:	2a04      	cmp	r2, #4
 800058e:	d006      	beq.n	800059e <HAL_RCC_OscConfig+0x2e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000590:	6862      	ldr	r2, [r4, #4]
 8000592:	4013      	ands	r3, r2
 8000594:	2b08      	cmp	r3, #8
 8000596:	d10a      	bne.n	80005ae <HAL_RCC_OscConfig+0x3e>
 8000598:	6863      	ldr	r3, [r4, #4]
 800059a:	03db      	lsls	r3, r3, #15
 800059c:	d507      	bpl.n	80005ae <HAL_RCC_OscConfig+0x3e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800059e:	6823      	ldr	r3, [r4, #0]
 80005a0:	039b      	lsls	r3, r3, #14
 80005a2:	d5eb      	bpl.n	800057c <HAL_RCC_OscConfig+0xc>
 80005a4:	686b      	ldr	r3, [r5, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1e8      	bne.n	800057c <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80005aa:	2001      	movs	r0, #1
 80005ac:	e1c3      	b.n	8000936 <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ae:	686b      	ldr	r3, [r5, #4]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d016      	beq.n	80005e2 <HAL_RCC_OscConfig+0x72>
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d10d      	bne.n	80005d4 <HAL_RCC_OscConfig+0x64>
 80005b8:	6822      	ldr	r2, [r4, #0]
 80005ba:	4bab      	ldr	r3, [pc, #684]	; (8000868 <HAL_RCC_OscConfig+0x2f8>)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005bc:	2680      	movs	r6, #128	; 0x80
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005be:	4013      	ands	r3, r2
 80005c0:	6023      	str	r3, [r4, #0]
 80005c2:	6822      	ldr	r2, [r4, #0]
 80005c4:	4ba9      	ldr	r3, [pc, #676]	; (800086c <HAL_RCC_OscConfig+0x2fc>)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005c6:	02b6      	lsls	r6, r6, #10
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005c8:	4013      	ands	r3, r2
 80005ca:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005cc:	f7ff feac 	bl	8000328 <HAL_GetTick>
 80005d0:	0007      	movs	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005d2:	e027      	b.n	8000624 <HAL_RCC_OscConfig+0xb4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005d4:	2b05      	cmp	r3, #5
 80005d6:	d109      	bne.n	80005ec <HAL_RCC_OscConfig+0x7c>
 80005d8:	2280      	movs	r2, #128	; 0x80
 80005da:	6823      	ldr	r3, [r4, #0]
 80005dc:	02d2      	lsls	r2, r2, #11
 80005de:	4313      	orrs	r3, r2
 80005e0:	6023      	str	r3, [r4, #0]
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	6823      	ldr	r3, [r4, #0]
 80005e6:	0252      	lsls	r2, r2, #9
 80005e8:	4313      	orrs	r3, r2
 80005ea:	e006      	b.n	80005fa <HAL_RCC_OscConfig+0x8a>
 80005ec:	6822      	ldr	r2, [r4, #0]
 80005ee:	4b9e      	ldr	r3, [pc, #632]	; (8000868 <HAL_RCC_OscConfig+0x2f8>)
 80005f0:	4013      	ands	r3, r2
 80005f2:	6023      	str	r3, [r4, #0]
 80005f4:	6822      	ldr	r2, [r4, #0]
 80005f6:	4b9d      	ldr	r3, [pc, #628]	; (800086c <HAL_RCC_OscConfig+0x2fc>)
 80005f8:	4013      	ands	r3, r2
 80005fa:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005fc:	f7ff fe94 	bl	8000328 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000600:	2680      	movs	r6, #128	; 0x80

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000602:	0007      	movs	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000604:	02b6      	lsls	r6, r6, #10
 8000606:	6823      	ldr	r3, [r4, #0]
 8000608:	4233      	tst	r3, r6
 800060a:	d1b7      	bne.n	800057c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800060c:	f7ff fe8c 	bl	8000328 <HAL_GetTick>
 8000610:	1bc0      	subs	r0, r0, r7
 8000612:	2864      	cmp	r0, #100	; 0x64
 8000614:	d9f7      	bls.n	8000606 <HAL_RCC_OscConfig+0x96>
          {
            return HAL_TIMEOUT;
 8000616:	2003      	movs	r0, #3
 8000618:	e18d      	b.n	8000936 <HAL_RCC_OscConfig+0x3c6>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800061a:	f7ff fe85 	bl	8000328 <HAL_GetTick>
 800061e:	1bc0      	subs	r0, r0, r7
 8000620:	2864      	cmp	r0, #100	; 0x64
 8000622:	d8f8      	bhi.n	8000616 <HAL_RCC_OscConfig+0xa6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000624:	6823      	ldr	r3, [r4, #0]
 8000626:	4233      	tst	r3, r6
 8000628:	d1f7      	bne.n	800061a <HAL_RCC_OscConfig+0xaa>
 800062a:	e7a7      	b.n	800057c <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800062c:	230c      	movs	r3, #12
 800062e:	4c8d      	ldr	r4, [pc, #564]	; (8000864 <HAL_RCC_OscConfig+0x2f4>)
 8000630:	6862      	ldr	r2, [r4, #4]
 8000632:	421a      	tst	r2, r3
 8000634:	d006      	beq.n	8000644 <HAL_RCC_OscConfig+0xd4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000636:	6862      	ldr	r2, [r4, #4]
 8000638:	4013      	ands	r3, r2
 800063a:	2b08      	cmp	r3, #8
 800063c:	d110      	bne.n	8000660 <HAL_RCC_OscConfig+0xf0>
 800063e:	6863      	ldr	r3, [r4, #4]
 8000640:	03db      	lsls	r3, r3, #15
 8000642:	d40d      	bmi.n	8000660 <HAL_RCC_OscConfig+0xf0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000644:	6823      	ldr	r3, [r4, #0]
 8000646:	079b      	lsls	r3, r3, #30
 8000648:	d502      	bpl.n	8000650 <HAL_RCC_OscConfig+0xe0>
 800064a:	68eb      	ldr	r3, [r5, #12]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d1ac      	bne.n	80005aa <HAL_RCC_OscConfig+0x3a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000650:	21f8      	movs	r1, #248	; 0xf8
 8000652:	6823      	ldr	r3, [r4, #0]
 8000654:	692a      	ldr	r2, [r5, #16]
 8000656:	438b      	bics	r3, r1
 8000658:	00d2      	lsls	r2, r2, #3
 800065a:	4313      	orrs	r3, r2
 800065c:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800065e:	e02c      	b.n	80006ba <HAL_RCC_OscConfig+0x14a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000660:	68eb      	ldr	r3, [r5, #12]
 8000662:	2201      	movs	r2, #1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d018      	beq.n	800069a <HAL_RCC_OscConfig+0x12a>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000668:	6823      	ldr	r3, [r4, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800066a:	2602      	movs	r6, #2
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800066c:	4313      	orrs	r3, r2
 800066e:	6023      	str	r3, [r4, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000670:	f7ff fe5a 	bl	8000328 <HAL_GetTick>
 8000674:	0007      	movs	r7, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000676:	6823      	ldr	r3, [r4, #0]
 8000678:	497a      	ldr	r1, [pc, #488]	; (8000864 <HAL_RCC_OscConfig+0x2f4>)
 800067a:	4233      	tst	r3, r6
 800067c:	d105      	bne.n	800068a <HAL_RCC_OscConfig+0x11a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800067e:	f7ff fe53 	bl	8000328 <HAL_GetTick>
 8000682:	1bc0      	subs	r0, r0, r7
 8000684:	2802      	cmp	r0, #2
 8000686:	d9f6      	bls.n	8000676 <HAL_RCC_OscConfig+0x106>
 8000688:	e7c5      	b.n	8000616 <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800068a:	20f8      	movs	r0, #248	; 0xf8
 800068c:	680b      	ldr	r3, [r1, #0]
 800068e:	692a      	ldr	r2, [r5, #16]
 8000690:	4383      	bics	r3, r0
 8000692:	00d2      	lsls	r2, r2, #3
 8000694:	4313      	orrs	r3, r2
 8000696:	600b      	str	r3, [r1, #0]
 8000698:	e00f      	b.n	80006ba <HAL_RCC_OscConfig+0x14a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800069a:	6823      	ldr	r3, [r4, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800069c:	2602      	movs	r6, #2
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800069e:	4393      	bics	r3, r2
 80006a0:	6023      	str	r3, [r4, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006a2:	f7ff fe41 	bl	8000328 <HAL_GetTick>
 80006a6:	0007      	movs	r7, r0
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006a8:	6823      	ldr	r3, [r4, #0]
 80006aa:	4233      	tst	r3, r6
 80006ac:	d005      	beq.n	80006ba <HAL_RCC_OscConfig+0x14a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006ae:	f7ff fe3b 	bl	8000328 <HAL_GetTick>
 80006b2:	1bc0      	subs	r0, r0, r7
 80006b4:	2802      	cmp	r0, #2
 80006b6:	d9f7      	bls.n	80006a8 <HAL_RCC_OscConfig+0x138>
 80006b8:	e7ad      	b.n	8000616 <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006ba:	682b      	ldr	r3, [r5, #0]
 80006bc:	071b      	lsls	r3, r3, #28
 80006be:	d403      	bmi.n	80006c8 <HAL_RCC_OscConfig+0x158>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006c0:	682b      	ldr	r3, [r5, #0]
 80006c2:	075b      	lsls	r3, r3, #29
 80006c4:	d425      	bmi.n	8000712 <HAL_RCC_OscConfig+0x1a2>
 80006c6:	e083      	b.n	80007d0 <HAL_RCC_OscConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006c8:	69eb      	ldr	r3, [r5, #28]
 80006ca:	2201      	movs	r2, #1
 80006cc:	4c65      	ldr	r4, [pc, #404]	; (8000864 <HAL_RCC_OscConfig+0x2f4>)
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00f      	beq.n	80006f2 <HAL_RCC_OscConfig+0x182>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80006d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006d4:	2602      	movs	r6, #2
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80006d6:	4313      	orrs	r3, r2
 80006d8:	6263      	str	r3, [r4, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80006da:	f7ff fe25 	bl	8000328 <HAL_GetTick>
 80006de:	0007      	movs	r7, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006e2:	4233      	tst	r3, r6
 80006e4:	d1ec      	bne.n	80006c0 <HAL_RCC_OscConfig+0x150>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006e6:	f7ff fe1f 	bl	8000328 <HAL_GetTick>
 80006ea:	1bc0      	subs	r0, r0, r7
 80006ec:	2802      	cmp	r0, #2
 80006ee:	d9f7      	bls.n	80006e0 <HAL_RCC_OscConfig+0x170>
 80006f0:	e791      	b.n	8000616 <HAL_RCC_OscConfig+0xa6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80006f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006f4:	2602      	movs	r6, #2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80006f6:	4393      	bics	r3, r2
 80006f8:	6263      	str	r3, [r4, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80006fa:	f7ff fe15 	bl	8000328 <HAL_GetTick>
 80006fe:	0007      	movs	r7, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000702:	4233      	tst	r3, r6
 8000704:	d0dc      	beq.n	80006c0 <HAL_RCC_OscConfig+0x150>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000706:	f7ff fe0f 	bl	8000328 <HAL_GetTick>
 800070a:	1bc0      	subs	r0, r0, r7
 800070c:	2802      	cmp	r0, #2
 800070e:	d9f7      	bls.n	8000700 <HAL_RCC_OscConfig+0x190>
 8000710:	e781      	b.n	8000616 <HAL_RCC_OscConfig+0xa6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000712:	2380      	movs	r3, #128	; 0x80
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8000714:	2100      	movs	r1, #0
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000716:	4c53      	ldr	r4, [pc, #332]	; (8000864 <HAL_RCC_OscConfig+0x2f4>)
 8000718:	055b      	lsls	r3, r3, #21
 800071a:	69e2      	ldr	r2, [r4, #28]
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 800071c:	9100      	str	r1, [sp, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800071e:	421a      	tst	r2, r3
 8000720:	d108      	bne.n	8000734 <HAL_RCC_OscConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	69e2      	ldr	r2, [r4, #28]
 8000724:	431a      	orrs	r2, r3
 8000726:	61e2      	str	r2, [r4, #28]
 8000728:	69e2      	ldr	r2, [r4, #28]
 800072a:	4013      	ands	r3, r2
 800072c:	9303      	str	r3, [sp, #12]
 800072e:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000730:	2301      	movs	r3, #1
 8000732:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000734:	2780      	movs	r7, #128	; 0x80
 8000736:	4e4e      	ldr	r6, [pc, #312]	; (8000870 <HAL_RCC_OscConfig+0x300>)
 8000738:	007f      	lsls	r7, r7, #1
 800073a:	6833      	ldr	r3, [r6, #0]
 800073c:	423b      	tst	r3, r7
 800073e:	d005      	beq.n	800074c <HAL_RCC_OscConfig+0x1dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000740:	68ab      	ldr	r3, [r5, #8]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d112      	bne.n	800076c <HAL_RCC_OscConfig+0x1fc>
 8000746:	6a22      	ldr	r2, [r4, #32]
 8000748:	4313      	orrs	r3, r2
 800074a:	e02e      	b.n	80007aa <HAL_RCC_OscConfig+0x23a>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800074c:	6833      	ldr	r3, [r6, #0]
 800074e:	433b      	orrs	r3, r7
 8000750:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000752:	f7ff fde9 	bl	8000328 <HAL_GetTick>
 8000756:	9001      	str	r0, [sp, #4]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000758:	6833      	ldr	r3, [r6, #0]
 800075a:	423b      	tst	r3, r7
 800075c:	d1f0      	bne.n	8000740 <HAL_RCC_OscConfig+0x1d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800075e:	f7ff fde3 	bl	8000328 <HAL_GetTick>
 8000762:	9b01      	ldr	r3, [sp, #4]
 8000764:	1ac0      	subs	r0, r0, r3
 8000766:	2864      	cmp	r0, #100	; 0x64
 8000768:	d9f6      	bls.n	8000758 <HAL_RCC_OscConfig+0x1e8>
 800076a:	e754      	b.n	8000616 <HAL_RCC_OscConfig+0xa6>
 800076c:	2201      	movs	r2, #1
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800076e:	2b00      	cmp	r3, #0
 8000770:	d10b      	bne.n	800078a <HAL_RCC_OscConfig+0x21a>
 8000772:	6a23      	ldr	r3, [r4, #32]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000774:	2702      	movs	r7, #2
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000776:	4393      	bics	r3, r2
 8000778:	6223      	str	r3, [r4, #32]
 800077a:	6a23      	ldr	r3, [r4, #32]
 800077c:	3203      	adds	r2, #3
 800077e:	4393      	bics	r3, r2
 8000780:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000782:	f7ff fdd1 	bl	8000328 <HAL_GetTick>
 8000786:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000788:	e018      	b.n	80007bc <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800078a:	2b05      	cmp	r3, #5
 800078c:	d107      	bne.n	800079e <HAL_RCC_OscConfig+0x22e>
 800078e:	2104      	movs	r1, #4
 8000790:	6a23      	ldr	r3, [r4, #32]
 8000792:	430b      	orrs	r3, r1
 8000794:	6223      	str	r3, [r4, #32]
 8000796:	6a23      	ldr	r3, [r4, #32]
 8000798:	431a      	orrs	r2, r3
 800079a:	6222      	str	r2, [r4, #32]
 800079c:	e0bc      	b.n	8000918 <HAL_RCC_OscConfig+0x3a8>
 800079e:	6a23      	ldr	r3, [r4, #32]
 80007a0:	4393      	bics	r3, r2
 80007a2:	2204      	movs	r2, #4
 80007a4:	6223      	str	r3, [r4, #32]
 80007a6:	6a23      	ldr	r3, [r4, #32]
 80007a8:	4393      	bics	r3, r2
 80007aa:	6223      	str	r3, [r4, #32]
 80007ac:	e0b4      	b.n	8000918 <HAL_RCC_OscConfig+0x3a8>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007ae:	f7ff fdbb 	bl	8000328 <HAL_GetTick>
 80007b2:	4b30      	ldr	r3, [pc, #192]	; (8000874 <HAL_RCC_OscConfig+0x304>)
 80007b4:	1b80      	subs	r0, r0, r6
 80007b6:	4298      	cmp	r0, r3
 80007b8:	d900      	bls.n	80007bc <HAL_RCC_OscConfig+0x24c>
 80007ba:	e72c      	b.n	8000616 <HAL_RCC_OscConfig+0xa6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007bc:	6a23      	ldr	r3, [r4, #32]
 80007be:	423b      	tst	r3, r7
 80007c0:	d1f5      	bne.n	80007ae <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80007c2:	9b00      	ldr	r3, [sp, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d103      	bne.n	80007d0 <HAL_RCC_OscConfig+0x260>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80007c8:	69e2      	ldr	r2, [r4, #28]
 80007ca:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <HAL_RCC_OscConfig+0x308>)
 80007cc:	4013      	ands	r3, r2
 80007ce:	61e3      	str	r3, [r4, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80007d0:	682b      	ldr	r3, [r5, #0]
 80007d2:	06db      	lsls	r3, r3, #27
 80007d4:	d541      	bpl.n	800085a <HAL_RCC_OscConfig+0x2ea>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80007d6:	696a      	ldr	r2, [r5, #20]
 80007d8:	4c22      	ldr	r4, [pc, #136]	; (8000864 <HAL_RCC_OscConfig+0x2f4>)
 80007da:	2304      	movs	r3, #4
 80007dc:	2a01      	cmp	r2, #1
 80007de:	d11b      	bne.n	8000818 <HAL_RCC_OscConfig+0x2a8>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80007e0:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80007e2:	2602      	movs	r6, #2

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80007e4:	430b      	orrs	r3, r1
 80007e6:	6363      	str	r3, [r4, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80007e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007ea:	431a      	orrs	r2, r3
 80007ec:	6362      	str	r2, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007ee:	f7ff fd9b 	bl	8000328 <HAL_GetTick>
 80007f2:	0007      	movs	r7, r0
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80007f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007f6:	491b      	ldr	r1, [pc, #108]	; (8000864 <HAL_RCC_OscConfig+0x2f4>)
 80007f8:	4233      	tst	r3, r6
 80007fa:	d105      	bne.n	8000808 <HAL_RCC_OscConfig+0x298>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80007fc:	f7ff fd94 	bl	8000328 <HAL_GetTick>
 8000800:	1bc0      	subs	r0, r0, r7
 8000802:	2802      	cmp	r0, #2
 8000804:	d9f6      	bls.n	80007f4 <HAL_RCC_OscConfig+0x284>
 8000806:	e706      	b.n	8000616 <HAL_RCC_OscConfig+0xa6>
          return HAL_TIMEOUT;
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000808:	20f8      	movs	r0, #248	; 0xf8
 800080a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800080c:	69aa      	ldr	r2, [r5, #24]
 800080e:	4383      	bics	r3, r0
 8000810:	00d2      	lsls	r2, r2, #3
 8000812:	4313      	orrs	r3, r2
 8000814:	634b      	str	r3, [r1, #52]	; 0x34
 8000816:	e020      	b.n	800085a <HAL_RCC_OscConfig+0x2ea>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000818:	3205      	adds	r2, #5
 800081a:	d10a      	bne.n	8000832 <HAL_RCC_OscConfig+0x2c2>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800081c:	21f8      	movs	r1, #248	; 0xf8
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800081e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000820:	439a      	bics	r2, r3
 8000822:	6362      	str	r2, [r4, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000824:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000826:	69aa      	ldr	r2, [r5, #24]
 8000828:	438b      	bics	r3, r1
 800082a:	00d2      	lsls	r2, r2, #3
 800082c:	4313      	orrs	r3, r2
 800082e:	6363      	str	r3, [r4, #52]	; 0x34
 8000830:	e013      	b.n	800085a <HAL_RCC_OscConfig+0x2ea>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000832:	6b62      	ldr	r2, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000834:	2602      	movs	r6, #2
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000836:	4313      	orrs	r3, r2

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000838:	2201      	movs	r2, #1
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800083a:	6363      	str	r3, [r4, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800083c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800083e:	4393      	bics	r3, r2
 8000840:	6363      	str	r3, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000842:	f7ff fd71 	bl	8000328 <HAL_GetTick>
 8000846:	0007      	movs	r7, r0
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000848:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800084a:	4233      	tst	r3, r6
 800084c:	d005      	beq.n	800085a <HAL_RCC_OscConfig+0x2ea>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800084e:	f7ff fd6b 	bl	8000328 <HAL_GetTick>
 8000852:	1bc0      	subs	r0, r0, r7
 8000854:	2802      	cmp	r0, #2
 8000856:	d9f7      	bls.n	8000848 <HAL_RCC_OscConfig+0x2d8>
 8000858:	e6dd      	b.n	8000616 <HAL_RCC_OscConfig+0xa6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800085a:	6a2a      	ldr	r2, [r5, #32]
 800085c:	2a00      	cmp	r2, #0
 800085e:	d10d      	bne.n	800087c <HAL_RCC_OscConfig+0x30c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000860:	2000      	movs	r0, #0
 8000862:	e068      	b.n	8000936 <HAL_RCC_OscConfig+0x3c6>
 8000864:	40021000 	.word	0x40021000
 8000868:	fffeffff 	.word	0xfffeffff
 800086c:	fffbffff 	.word	0xfffbffff
 8000870:	40007000 	.word	0x40007000
 8000874:	00001388 	.word	0x00001388
 8000878:	efffffff 	.word	0xefffffff
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800087c:	230c      	movs	r3, #12
 800087e:	4c2f      	ldr	r4, [pc, #188]	; (800093c <HAL_RCC_OscConfig+0x3cc>)
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000880:	2001      	movs	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000882:	6861      	ldr	r1, [r4, #4]
 8000884:	400b      	ands	r3, r1
 8000886:	2b08      	cmp	r3, #8
 8000888:	d055      	beq.n	8000936 <HAL_RCC_OscConfig+0x3c6>
 800088a:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <HAL_RCC_OscConfig+0x3d0>)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800088c:	2a02      	cmp	r2, #2
 800088e:	d132      	bne.n	80008f6 <HAL_RCC_OscConfig+0x386>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000890:	6822      	ldr	r2, [r4, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000892:	2680      	movs	r6, #128	; 0x80
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000894:	4013      	ands	r3, r2
 8000896:	6023      	str	r3, [r4, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000898:	f7ff fd46 	bl	8000328 <HAL_GetTick>
 800089c:	0007      	movs	r7, r0
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800089e:	04b6      	lsls	r6, r6, #18
 80008a0:	6822      	ldr	r2, [r4, #0]
 80008a2:	4b26      	ldr	r3, [pc, #152]	; (800093c <HAL_RCC_OscConfig+0x3cc>)
 80008a4:	4232      	tst	r2, r6
 80008a6:	d005      	beq.n	80008b4 <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008a8:	f7ff fd3e 	bl	8000328 <HAL_GetTick>
 80008ac:	1bc0      	subs	r0, r0, r7
 80008ae:	2802      	cmp	r0, #2
 80008b0:	d9f6      	bls.n	80008a0 <HAL_RCC_OscConfig+0x330>
 80008b2:	e6b0      	b.n	8000616 <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008b4:	210f      	movs	r1, #15
 80008b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008b8:	438a      	bics	r2, r1
 80008ba:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80008bc:	430a      	orrs	r2, r1
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
 80008c0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80008c2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80008c4:	685a      	ldr	r2, [r3, #4]
 80008c6:	4308      	orrs	r0, r1
 80008c8:	491e      	ldr	r1, [pc, #120]	; (8000944 <HAL_RCC_OscConfig+0x3d4>)
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008ca:	2580      	movs	r5, #128	; 0x80
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008cc:	400a      	ands	r2, r1
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80008ce:	2180      	movs	r1, #128	; 0x80
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008d0:	4302      	orrs	r2, r0
 80008d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	0449      	lsls	r1, r1, #17
 80008d8:	430a      	orrs	r2, r1
 80008da:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008dc:	f7ff fd24 	bl	8000328 <HAL_GetTick>
 80008e0:	0006      	movs	r6, r0
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008e2:	04ad      	lsls	r5, r5, #18
 80008e4:	6823      	ldr	r3, [r4, #0]
 80008e6:	422b      	tst	r3, r5
 80008e8:	d1ba      	bne.n	8000860 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008ea:	f7ff fd1d 	bl	8000328 <HAL_GetTick>
 80008ee:	1b80      	subs	r0, r0, r6
 80008f0:	2802      	cmp	r0, #2
 80008f2:	d9f7      	bls.n	80008e4 <HAL_RCC_OscConfig+0x374>
 80008f4:	e68f      	b.n	8000616 <HAL_RCC_OscConfig+0xa6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80008f6:	6822      	ldr	r2, [r4, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008f8:	2580      	movs	r5, #128	; 0x80
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80008fa:	4013      	ands	r3, r2
 80008fc:	6023      	str	r3, [r4, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008fe:	f7ff fd13 	bl	8000328 <HAL_GetTick>
 8000902:	0006      	movs	r6, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000904:	04ad      	lsls	r5, r5, #18
 8000906:	6823      	ldr	r3, [r4, #0]
 8000908:	422b      	tst	r3, r5
 800090a:	d0a9      	beq.n	8000860 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800090c:	f7ff fd0c 	bl	8000328 <HAL_GetTick>
 8000910:	1b80      	subs	r0, r0, r6
 8000912:	2802      	cmp	r0, #2
 8000914:	d9f7      	bls.n	8000906 <HAL_RCC_OscConfig+0x396>
 8000916:	e67e      	b.n	8000616 <HAL_RCC_OscConfig+0xa6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000918:	f7ff fd06 	bl	8000328 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800091c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800091e:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000920:	6a23      	ldr	r3, [r4, #32]
 8000922:	423b      	tst	r3, r7
 8000924:	d000      	beq.n	8000928 <HAL_RCC_OscConfig+0x3b8>
 8000926:	e74c      	b.n	80007c2 <HAL_RCC_OscConfig+0x252>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000928:	f7ff fcfe 	bl	8000328 <HAL_GetTick>
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_RCC_OscConfig+0x3d8>)
 800092e:	1b80      	subs	r0, r0, r6
 8000930:	4298      	cmp	r0, r3
 8000932:	d9f5      	bls.n	8000920 <HAL_RCC_OscConfig+0x3b0>
 8000934:	e66f      	b.n	8000616 <HAL_RCC_OscConfig+0xa6>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000936:	b005      	add	sp, #20
 8000938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	40021000 	.word	0x40021000
 8000940:	feffffff 	.word	0xfeffffff
 8000944:	ffc2ffff 	.word	0xffc2ffff
 8000948:	00001388 	.word	0x00001388

0800094c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800094c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 800094e:	4c14      	ldr	r4, [pc, #80]	; (80009a0 <HAL_RCC_GetSysClockFreq+0x54>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000950:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8000952:	2210      	movs	r2, #16
 8000954:	0021      	movs	r1, r4
 8000956:	4668      	mov	r0, sp
 8000958:	f000 f9c8 	bl	8000cec <memcpy>
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 800095c:	0021      	movs	r1, r4
 800095e:	ad04      	add	r5, sp, #16
 8000960:	2210      	movs	r2, #16
 8000962:	3110      	adds	r1, #16
 8000964:	0028      	movs	r0, r5
 8000966:	f000 f9c1 	bl	8000cec <memcpy>
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800096a:	230c      	movs	r3, #12
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <HAL_RCC_GetSysClockFreq+0x58>)
 800096e:	6842      	ldr	r2, [r0, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000970:	4013      	ands	r3, r2
 8000972:	2b08      	cmp	r3, #8
 8000974:	d110      	bne.n	8000998 <HAL_RCC_GetSysClockFreq+0x4c>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000976:	466c      	mov	r4, sp
 8000978:	3307      	adds	r3, #7
 800097a:	0c91      	lsrs	r1, r2, #18
 800097c:	4019      	ands	r1, r3
 800097e:	5c64      	ldrb	r4, [r4, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000980:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000982:	400b      	ands	r3, r1
 8000984:	5ce9      	ldrb	r1, [r5, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000986:	03d3      	lsls	r3, r2, #15
 8000988:	d503      	bpl.n	8000992 <HAL_RCC_GetSysClockFreq+0x46>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800098a:	4807      	ldr	r0, [pc, #28]	; (80009a8 <HAL_RCC_GetSysClockFreq+0x5c>)
 800098c:	f7ff fbbc 	bl	8000108 <__aeabi_uidiv>
 8000990:	e000      	b.n	8000994 <HAL_RCC_GetSysClockFreq+0x48>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <HAL_RCC_GetSysClockFreq+0x60>)
 8000994:	4360      	muls	r0, r4
 8000996:	e000      	b.n	800099a <HAL_RCC_GetSysClockFreq+0x4e>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800099a:	b009      	add	sp, #36	; 0x24
 800099c:	bd30      	pop	{r4, r5, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	08000d18 	.word	0x08000d18
 80009a4:	40021000 	.word	0x40021000
 80009a8:	007a1200 	.word	0x007a1200
 80009ac:	003d0900 	.word	0x003d0900

080009b0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009b0:	2301      	movs	r3, #1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80009b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009b4:	4d43      	ldr	r5, [pc, #268]	; (8000ac4 <HAL_RCC_ClockConfig+0x114>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80009b6:	0006      	movs	r6, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009b8:	682a      	ldr	r2, [r5, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80009ba:	000f      	movs	r7, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009bc:	401a      	ands	r2, r3
 80009be:	428a      	cmp	r2, r1
 80009c0:	d30a      	bcc.n	80009d8 <HAL_RCC_ClockConfig+0x28>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009c2:	6832      	ldr	r2, [r6, #0]
 80009c4:	0793      	lsls	r3, r2, #30
 80009c6:	d511      	bpl.n	80009ec <HAL_RCC_ClockConfig+0x3c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009c8:	20f0      	movs	r0, #240	; 0xf0
 80009ca:	493f      	ldr	r1, [pc, #252]	; (8000ac8 <HAL_RCC_ClockConfig+0x118>)
 80009cc:	684b      	ldr	r3, [r1, #4]
 80009ce:	4383      	bics	r3, r0
 80009d0:	68b0      	ldr	r0, [r6, #8]
 80009d2:	4303      	orrs	r3, r0
 80009d4:	604b      	str	r3, [r1, #4]
 80009d6:	e009      	b.n	80009ec <HAL_RCC_ClockConfig+0x3c>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009d8:	682a      	ldr	r2, [r5, #0]
 80009da:	439a      	bics	r2, r3
 80009dc:	430a      	orrs	r2, r1
 80009de:	602a      	str	r2, [r5, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009e0:	682a      	ldr	r2, [r5, #0]
 80009e2:	4013      	ands	r3, r2
 80009e4:	4299      	cmp	r1, r3
 80009e6:	d0ec      	beq.n	80009c2 <HAL_RCC_ClockConfig+0x12>
    {
      return HAL_ERROR;
 80009e8:	2001      	movs	r0, #1
 80009ea:	e069      	b.n	8000ac0 <HAL_RCC_ClockConfig+0x110>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009ec:	07d3      	lsls	r3, r2, #31
 80009ee:	d406      	bmi.n	80009fe <HAL_RCC_ClockConfig+0x4e>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80009f0:	2301      	movs	r3, #1
 80009f2:	6829      	ldr	r1, [r5, #0]
 80009f4:	4a33      	ldr	r2, [pc, #204]	; (8000ac4 <HAL_RCC_ClockConfig+0x114>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	428f      	cmp	r7, r1
 80009fa:	d343      	bcc.n	8000a84 <HAL_RCC_ClockConfig+0xd4>
 80009fc:	e048      	b.n	8000a90 <HAL_RCC_ClockConfig+0xe0>
 80009fe:	4c32      	ldr	r4, [pc, #200]	; (8000ac8 <HAL_RCC_ClockConfig+0x118>)
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a00:	6873      	ldr	r3, [r6, #4]
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a02:	6822      	ldr	r2, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d102      	bne.n	8000a0e <HAL_RCC_ClockConfig+0x5e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a08:	0392      	lsls	r2, r2, #14
 8000a0a:	d407      	bmi.n	8000a1c <HAL_RCC_ClockConfig+0x6c>
 8000a0c:	e7ec      	b.n	80009e8 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d102      	bne.n	8000a18 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a12:	0192      	lsls	r2, r2, #6
 8000a14:	d402      	bmi.n	8000a1c <HAL_RCC_ClockConfig+0x6c>
 8000a16:	e7e7      	b.n	80009e8 <HAL_RCC_ClockConfig+0x38>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a18:	0792      	lsls	r2, r2, #30
 8000a1a:	d5e5      	bpl.n	80009e8 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a1c:	2103      	movs	r1, #3
 8000a1e:	6862      	ldr	r2, [r4, #4]
 8000a20:	438a      	bics	r2, r1
 8000a22:	4313      	orrs	r3, r2
 8000a24:	6063      	str	r3, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000a26:	f7ff fc7f 	bl	8000328 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a2a:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000a2c:	9001      	str	r0, [sp, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d10d      	bne.n	8000a4e <HAL_RCC_ClockConfig+0x9e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a32:	220c      	movs	r2, #12
 8000a34:	6863      	ldr	r3, [r4, #4]
 8000a36:	4013      	ands	r3, r2
 8000a38:	2b04      	cmp	r3, #4
 8000a3a:	d0d9      	beq.n	80009f0 <HAL_RCC_ClockConfig+0x40>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a3c:	f7ff fc74 	bl	8000328 <HAL_GetTick>
 8000a40:	9b01      	ldr	r3, [sp, #4]
 8000a42:	1ac0      	subs	r0, r0, r3
 8000a44:	4b21      	ldr	r3, [pc, #132]	; (8000acc <HAL_RCC_ClockConfig+0x11c>)
 8000a46:	4298      	cmp	r0, r3
 8000a48:	d9f3      	bls.n	8000a32 <HAL_RCC_ClockConfig+0x82>
        {
          return HAL_TIMEOUT;
 8000a4a:	2003      	movs	r0, #3
 8000a4c:	e038      	b.n	8000ac0 <HAL_RCC_ClockConfig+0x110>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d113      	bne.n	8000a7a <HAL_RCC_ClockConfig+0xca>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a52:	220c      	movs	r2, #12
 8000a54:	6863      	ldr	r3, [r4, #4]
 8000a56:	4013      	ands	r3, r2
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d0c9      	beq.n	80009f0 <HAL_RCC_ClockConfig+0x40>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a5c:	f7ff fc64 	bl	8000328 <HAL_GetTick>
 8000a60:	9b01      	ldr	r3, [sp, #4]
 8000a62:	1ac0      	subs	r0, r0, r3
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_RCC_ClockConfig+0x11c>)
 8000a66:	4298      	cmp	r0, r3
 8000a68:	d9f3      	bls.n	8000a52 <HAL_RCC_ClockConfig+0xa2>
 8000a6a:	e7ee      	b.n	8000a4a <HAL_RCC_ClockConfig+0x9a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a6c:	f7ff fc5c 	bl	8000328 <HAL_GetTick>
 8000a70:	9b01      	ldr	r3, [sp, #4]
 8000a72:	1ac0      	subs	r0, r0, r3
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_RCC_ClockConfig+0x11c>)
 8000a76:	4298      	cmp	r0, r3
 8000a78:	d8e7      	bhi.n	8000a4a <HAL_RCC_ClockConfig+0x9a>
      }
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	6863      	ldr	r3, [r4, #4]
 8000a7e:	4213      	tst	r3, r2
 8000a80:	d1f4      	bne.n	8000a6c <HAL_RCC_ClockConfig+0xbc>
 8000a82:	e7b5      	b.n	80009f0 <HAL_RCC_ClockConfig+0x40>
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a84:	6811      	ldr	r1, [r2, #0]
 8000a86:	4399      	bics	r1, r3
 8000a88:	6011      	str	r1, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a8a:	6812      	ldr	r2, [r2, #0]
 8000a8c:	421a      	tst	r2, r3
 8000a8e:	d1ab      	bne.n	80009e8 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a90:	6833      	ldr	r3, [r6, #0]
 8000a92:	4c0d      	ldr	r4, [pc, #52]	; (8000ac8 <HAL_RCC_ClockConfig+0x118>)
 8000a94:	075b      	lsls	r3, r3, #29
 8000a96:	d505      	bpl.n	8000aa4 <HAL_RCC_ClockConfig+0xf4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000a98:	6862      	ldr	r2, [r4, #4]
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <HAL_RCC_ClockConfig+0x120>)
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	68f2      	ldr	r2, [r6, #12]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	6063      	str	r3, [r4, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000aa4:	f7ff ff52 	bl	800094c <HAL_RCC_GetSysClockFreq>
 8000aa8:	6863      	ldr	r3, [r4, #4]
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <HAL_RCC_ClockConfig+0x124>)
 8000aac:	061b      	lsls	r3, r3, #24
 8000aae:	0f1b      	lsrs	r3, r3, #28
 8000ab0:	5cd3      	ldrb	r3, [r2, r3]
 8000ab2:	40d8      	lsrs	r0, r3
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_RCC_ClockConfig+0x128>)
 8000ab6:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f7ff fc0b 	bl	80002d4 <HAL_InitTick>
  
  return HAL_OK;
 8000abe:	2000      	movs	r0, #0
}
 8000ac0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	40022000 	.word	0x40022000
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	00001388 	.word	0x00001388
 8000ad0:	fffff8ff 	.word	0xfffff8ff
 8000ad4:	08000d38 	.word	0x08000d38
 8000ad8:	20000000 	.word	0x20000000

08000adc <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000adc:	4b01      	ldr	r3, [pc, #4]	; (8000ae4 <HAL_RCC_GetHCLKFreq+0x8>)
 8000ade:	6818      	ldr	r0, [r3, #0]
}
 8000ae0:	4770      	bx	lr
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <light_On>:

/* USER CODE END 0 */

  void light_On()
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000ae8:	2180      	movs	r1, #128	; 0x80
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

  void light_On()
  {
 8000aea:	b510      	push	{r4, lr}
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	0049      	lsls	r1, r1, #1
 8000af0:	4801      	ldr	r0, [pc, #4]	; (8000af8 <light_On+0x10>)
 8000af2:	f7ff fd37 	bl	8000564 <HAL_GPIO_WritePin>
  }
 8000af6:	bd10      	pop	{r4, pc}
 8000af8:	48000800 	.word	0x48000800

08000afc <light_Off>:

  void light_Off()
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000afc:	2180      	movs	r1, #128	; 0x80
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
  }

  void light_Off()
  {
 8000afe:	b510      	push	{r4, lr}
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	0049      	lsls	r1, r1, #1
 8000b04:	4801      	ldr	r0, [pc, #4]	; (8000b0c <light_Off+0x10>)
 8000b06:	f7ff fd2d 	bl	8000564 <HAL_GPIO_WritePin>
  }
 8000b0a:	bd10      	pop	{r4, pc}
 8000b0c:	48000800 	.word	0x48000800

08000b10 <char_to_morse>:

	  HAL_Delay(10*UNIT);
  }

  void char_to_morse(uint8_t  symbol)
  {
 8000b10:	b510      	push	{r4, lr}
	  switch (symbol)
 8000b12:	284f      	cmp	r0, #79	; 0x4f
 8000b14:	d00d      	beq.n	8000b32 <char_to_morse+0x22>
 8000b16:	2853      	cmp	r0, #83	; 0x53
 8000b18:	d006      	beq.n	8000b28 <char_to_morse+0x18>
 8000b1a:	2820      	cmp	r0, #32
 8000b1c:	d115      	bne.n	8000b4a <char_to_morse+0x3a>
	  	  {
	  	      case 'S': light_On(); HAL_Delay(2*UNIT); light_Off(); HAL_Delay(UNIT); return;
	  	      case 'O': light_On(); HAL_Delay(4*UNIT); light_Off(); HAL_Delay(UNIT); return;
	  	      case ' ': light_On(); HAL_Delay(UNIT);  light_Off();  HAL_Delay(UNIT); return;
 8000b1e:	f7ff ffe3 	bl	8000ae8 <light_On>
 8000b22:	20fa      	movs	r0, #250	; 0xfa
 8000b24:	0040      	lsls	r0, r0, #1
 8000b26:	e008      	b.n	8000b3a <char_to_morse+0x2a>

  void char_to_morse(uint8_t  symbol)
  {
	  switch (symbol)
	  	  {
	  	      case 'S': light_On(); HAL_Delay(2*UNIT); light_Off(); HAL_Delay(UNIT); return;
 8000b28:	f7ff ffde 	bl	8000ae8 <light_On>
 8000b2c:	20fa      	movs	r0, #250	; 0xfa
 8000b2e:	0080      	lsls	r0, r0, #2
 8000b30:	e003      	b.n	8000b3a <char_to_morse+0x2a>
	  	      case 'O': light_On(); HAL_Delay(4*UNIT); light_Off(); HAL_Delay(UNIT); return;
 8000b32:	f7ff ffd9 	bl	8000ae8 <light_On>
 8000b36:	20fa      	movs	r0, #250	; 0xfa
 8000b38:	00c0      	lsls	r0, r0, #3
	  	      case ' ': light_On(); HAL_Delay(UNIT);  light_Off();  HAL_Delay(UNIT); return;
 8000b3a:	f7ff fbfb 	bl	8000334 <HAL_Delay>
 8000b3e:	f7ff ffdd 	bl	8000afc <light_Off>
 8000b42:	20fa      	movs	r0, #250	; 0xfa
 8000b44:	0040      	lsls	r0, r0, #1
 8000b46:	f7ff fbf5 	bl	8000334 <HAL_Delay>
	  	      default: return;
	  	  }
  }
 8000b4a:	bd10      	pop	{r4, pc}

08000b4c <str_to_morse>:

  void str_to_morse(uint8_t * str)
  {
 8000b4c:	b570      	push	{r4, r5, r6, lr}
 8000b4e:	0004      	movs	r4, r0
 8000b50:	1cc5      	adds	r5, r0, #3
	  uint8_t symbol;

	  for(int i = 0; i < sizeof(str) - 1; i++)
 8000b52:	42ac      	cmp	r4, r5
 8000b54:	d004      	beq.n	8000b60 <str_to_morse+0x14>
	  {
	      symbol = str[i];
	      char_to_morse(symbol);
 8000b56:	7820      	ldrb	r0, [r4, #0]
 8000b58:	f7ff ffda 	bl	8000b10 <char_to_morse>
 8000b5c:	3401      	adds	r4, #1
 8000b5e:	e7f8      	b.n	8000b52 <str_to_morse+0x6>
	  }

	  HAL_Delay(10*UNIT);
 8000b60:	4801      	ldr	r0, [pc, #4]	; (8000b68 <str_to_morse+0x1c>)
 8000b62:	f7ff fbe7 	bl	8000334 <HAL_Delay>
  }
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
 8000b68:	00001388 	.word	0x00001388

08000b6c <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000b6c:	2310      	movs	r3, #16
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000b6e:	b530      	push	{r4, r5, lr}
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000b70:	22a0      	movs	r2, #160	; 0xa0
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000b72:	b091      	sub	sp, #68	; 0x44

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b74:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b76:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000b78:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b7a:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000b7c:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7e:	a804      	add	r0, sp, #16
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b80:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b82:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b84:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b86:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000b88:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b8a:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8c:	f7ff fcf0 	bl	8000570 <HAL_RCC_OscConfig>
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d000      	beq.n	8000b96 <SystemClock_Config+0x2a>
 8000b94:	e7fe      	b.n	8000b94 <SystemClock_Config+0x28>
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b96:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b98:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b9a:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b9c:	0029      	movs	r1, r5
 8000b9e:	4668      	mov	r0, sp
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba0:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba2:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ba4:	f7ff ff04 	bl	80009b0 <HAL_RCC_ClockConfig>
 8000ba8:	1e04      	subs	r4, r0, #0
 8000baa:	d000      	beq.n	8000bae <SystemClock_Config+0x42>
 8000bac:	e7fe      	b.n	8000bac <SystemClock_Config+0x40>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000bae:	f7ff ff95 	bl	8000adc <HAL_RCC_GetHCLKFreq>
 8000bb2:	21fa      	movs	r1, #250	; 0xfa
 8000bb4:	0089      	lsls	r1, r1, #2
 8000bb6:	f7ff faa7 	bl	8000108 <__aeabi_uidiv>
 8000bba:	f7ff fbf7 	bl	80003ac <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000bbe:	2004      	movs	r0, #4
 8000bc0:	f7ff fc0e 	bl	80003e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	0022      	movs	r2, r4
 8000bc8:	0021      	movs	r1, r4
 8000bca:	4240      	negs	r0, r0
 8000bcc:	f7ff fbbe 	bl	800034c <HAL_NVIC_SetPriority>
}
 8000bd0:	b011      	add	sp, #68	; 0x44
 8000bd2:	bd30      	pop	{r4, r5, pc}

08000bd4 <main>:

	  HAL_Delay(10*UNIT);
  }

int main(void)
{
 8000bd4:	b570      	push	{r4, r5, r6, lr}
 8000bd6:	b088      	sub	sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd8:	f7ff fb8e 	bl	80002f8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000bdc:	f7ff ffc6 	bl	8000b6c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	2280      	movs	r2, #128	; 0x80
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <main+0x70>)
 8000be4:	0292      	lsls	r2, r2, #10
 8000be6:	6959      	ldr	r1, [r3, #20]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be8:	2090      	movs	r0, #144	; 0x90
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4311      	orrs	r1, r2
 8000bec:	6159      	str	r1, [r3, #20]
 8000bee:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf0:	2501      	movs	r5, #1
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	400a      	ands	r2, r1
 8000bf4:	9201      	str	r2, [sp, #4]
 8000bf6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf8:	2280      	movs	r2, #128	; 0x80

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2400      	movs	r4, #0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000bfc:	26c0      	movs	r6, #192	; 0xc0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	6959      	ldr	r1, [r3, #20]
 8000c00:	0312      	lsls	r2, r2, #12
 8000c02:	4311      	orrs	r1, r2
 8000c04:	6159      	str	r1, [r3, #20]
 8000c06:	695b      	ldr	r3, [r3, #20]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c08:	a903      	add	r1, sp, #12

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	9202      	str	r2, [sp, #8]
 8000c0e:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <main+0x74>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c12:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c14:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000c16:	00b6      	lsls	r6, r6, #2
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c18:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f7ff fbf4 	bl	8000408 <HAL_GPIO_Init>
  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c20:	a903      	add	r1, sp, #12
 8000c22:	480a      	ldr	r0, [pc, #40]	; (8000c4c <main+0x78>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000c24:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c28:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2c:	f7ff fbec 	bl	8000408 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c30:	0022      	movs	r2, r4
 8000c32:	0031      	movs	r1, r6
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <main+0x78>)
 8000c36:	f7ff fc95 	bl	8000564 <HAL_GPIO_WritePin>

	  //lightOnButtonPressed();

	  //getStrSize("SOS");

	  str_to_morse("SOS");
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <main+0x7c>)
 8000c3c:	f7ff ff86 	bl	8000b4c <str_to_morse>
 8000c40:	e7fb      	b.n	8000c3a <main+0x66>
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	40021000 	.word	0x40021000
 8000c48:	10120000 	.word	0x10120000
 8000c4c:	48000800 	.word	0x48000800
 8000c50:	08000d48 	.word	0x08000d48

08000c54 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c54:	2301      	movs	r3, #1

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c56:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <HAL_MspInit+0x3c>)

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8000c5a:	2005      	movs	r0, #5
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5c:	6991      	ldr	r1, [r2, #24]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8000c5e:	4240      	negs	r0, r0
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c60:	4319      	orrs	r1, r3
 8000c62:	6191      	str	r1, [r2, #24]
 8000c64:	6992      	ldr	r2, [r2, #24]
 8000c66:	4013      	ands	r3, r2

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8000c68:	2200      	movs	r2, #0
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8000c6c:	0011      	movs	r1, r2
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8000c70:	f7ff fb6c 	bl	800034c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2002      	movs	r0, #2
 8000c78:	0011      	movs	r1, r2
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	f7ff fb66 	bl	800034c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2001      	movs	r0, #1
 8000c84:	0011      	movs	r1, r2
 8000c86:	4240      	negs	r0, r0
 8000c88:	f7ff fb60 	bl	800034c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8c:	bd07      	pop	{r0, r1, r2, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	40021000 	.word	0x40021000

08000c94 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000c94:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c96:	f7ff fb3f 	bl	8000318 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000c9a:	f7ff fbb0 	bl	80003fe <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9e:	bd10      	pop	{r4, pc}

08000ca0 <__libc_init_array>:
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <__libc_init_array+0x3c>)
 8000ca2:	b570      	push	{r4, r5, r6, lr}
 8000ca4:	2500      	movs	r5, #0
 8000ca6:	001e      	movs	r6, r3
 8000ca8:	4c0d      	ldr	r4, [pc, #52]	; (8000ce0 <__libc_init_array+0x40>)
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	10a4      	asrs	r4, r4, #2
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	d004      	beq.n	8000cbc <__libc_init_array+0x1c>
 8000cb2:	00ab      	lsls	r3, r5, #2
 8000cb4:	58f3      	ldr	r3, [r6, r3]
 8000cb6:	4798      	blx	r3
 8000cb8:	3501      	adds	r5, #1
 8000cba:	e7f8      	b.n	8000cae <__libc_init_array+0xe>
 8000cbc:	f000 f820 	bl	8000d00 <_init>
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <__libc_init_array+0x44>)
 8000cc2:	2500      	movs	r5, #0
 8000cc4:	001e      	movs	r6, r3
 8000cc6:	4c08      	ldr	r4, [pc, #32]	; (8000ce8 <__libc_init_array+0x48>)
 8000cc8:	1ae4      	subs	r4, r4, r3
 8000cca:	10a4      	asrs	r4, r4, #2
 8000ccc:	42a5      	cmp	r5, r4
 8000cce:	d004      	beq.n	8000cda <__libc_init_array+0x3a>
 8000cd0:	00ab      	lsls	r3, r5, #2
 8000cd2:	58f3      	ldr	r3, [r6, r3]
 8000cd4:	4798      	blx	r3
 8000cd6:	3501      	adds	r5, #1
 8000cd8:	e7f8      	b.n	8000ccc <__libc_init_array+0x2c>
 8000cda:	bd70      	pop	{r4, r5, r6, pc}
 8000cdc:	08000d4c 	.word	0x08000d4c
 8000ce0:	08000d4c 	.word	0x08000d4c
 8000ce4:	08000d4c 	.word	0x08000d4c
 8000ce8:	08000d50 	.word	0x08000d50

08000cec <memcpy>:
 8000cec:	2300      	movs	r3, #0
 8000cee:	b510      	push	{r4, lr}
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d003      	beq.n	8000cfc <memcpy+0x10>
 8000cf4:	5ccc      	ldrb	r4, [r1, r3]
 8000cf6:	54c4      	strb	r4, [r0, r3]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	e7f9      	b.n	8000cf0 <memcpy+0x4>
 8000cfc:	bd10      	pop	{r4, pc}
	...

08000d00 <_init>:
 8000d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d06:	bc08      	pop	{r3}
 8000d08:	469e      	mov	lr, r3
 8000d0a:	4770      	bx	lr

08000d0c <_fini>:
 8000d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d12:	bc08      	pop	{r3}
 8000d14:	469e      	mov	lr, r3
 8000d16:	4770      	bx	lr
